<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Coooody&#39;s</title>
    <link>https://Cody2333.github.io/blog/docs/tags/javascript/</link>
    <description>Recent content in javascript on Coooody&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Cody2333.github.io/blog/docs/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>koa-swagger-decorator:基于注解根据API自动生成可视化swagger文档</title>
      <link>https://Cody2333.github.io/blog/docs/posts/%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8swagger%E7%BB%B4%E6%8A%A4node%E7%9A%84%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://Cody2333.github.io/blog/docs/posts/%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8swagger%E7%BB%B4%E6%8A%A4node%E7%9A%84%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid>
      <description>背景介绍 在前后端分离的架构下，后端如果能够维护一份与代码实时同步更新，并且可读性良好的文档，可以极大的减少前后端沟通交流的成本，也可以提升前</description>
    </item>
    
    <item>
      <title>理解nodeJs中的stream</title>
      <link>https://Cody2333.github.io/blog/docs/posts/%E7%90%86%E8%A7%A3node-js%E4%B8%AD%E7%9A%84stream/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://Cody2333.github.io/blog/docs/posts/%E7%90%86%E8%A7%A3node-js%E4%B8%AD%E7%9A%84stream/</guid>
      <description>简介 主要对stream这个概念做一个形象的描述和理解，同时介绍一下比较常用的API。主要参考了Node.js的官方文档。 stream的种类 Readable</description>
    </item>
    
    <item>
      <title>基于Promise和Async-Await的异步流程控制</title>
      <link>https://Cody2333.github.io/blog/docs/posts/%E5%9F%BA%E4%BA%8Epromise%E5%92%8Casync-await%E7%9A%84%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://Cody2333.github.io/blog/docs/posts/%E5%9F%BA%E4%BA%8Epromise%E5%92%8Casync-await%E7%9A%84%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>简介 很久以前，在Promise出现之前，编写js的异步代码是一件十分蛋疼的事情，一旦异步流程一复杂，回调地狱就会等着你，所以基于node.j</description>
    </item>
    
    <item>
      <title>填坑-前端导出csv文件的方法</title>
      <link>https://Cody2333.github.io/blog/docs/posts/%E5%A1%AB%E5%9D%91-%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://Cody2333.github.io/blog/docs/posts/%E5%A1%AB%E5%9D%91-%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/</guid>
      <description>在前后端分离的情况下，通常前端浏览器提供用户文件下载的功能的实现方式如下： 前端请求后端api 后端根据前端的请求生成一个文件 后端返回一个下载的</description>
    </item>
    
  </channel>
</rss>